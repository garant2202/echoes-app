// Three.js —Å—Ü–µ–Ω–∞
let camera, scene, renderer;
let particlesMesh, sphere;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D-—Å—Ü–µ–Ω–∏
function init3DScene() {
    // –°—Ü–µ–Ω–∞
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x111111);
    
    // –ö–∞–º–µ—Ä–∞
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —Ç—É–º–∞–Ω—É
    const particlesGeometry = new THREE.BufferGeometry();
    const particlesCount = 1000;
    const posArray = new Float32Array(particlesCount * 3);
    
    for(let i = 0; i < particlesCount * 3; i++) {
        posArray[i] = (Math.random() - 0.5) * 10;
    }
    
    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
    
    const particlesMaterial = new THREE.PointsMaterial({
        size: 0.05,
        color: 0x4776e6,
        transparent: true,
        opacity: 0.5
    });
    
    particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particlesMesh);
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    
    const pointLight = new THREE.PointLight(0x4776e6, 1);
    pointLight.position.set(2, 3, 4);
    scene.add(pointLight);
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ñ–µ—Ä–∏ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≥–∞–¥—É
    const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);
    const sphereMaterial = new THREE.MeshStandardMaterial({
        color: 0xffffff,
        transparent: true,
        opacity: 0.7,
        emissive: 0x4776e6,
        emissiveIntensity: 0.3
    });
    
    sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    scene.add(sphere);
    
    // –†–µ–Ω–¥–µ—Ä–µ—Ä
    const canvas = document.getElementById('experience-canvas');
    if (canvas) {
        renderer = new THREE.WebGLRenderer({ 
            antialias: true, 
            canvas: canvas 
        });
        
        const previewElement = document.querySelector('.experience-preview');
        if (previewElement) {
            renderer.setSize(previewElement.offsetWidth, previewElement.offsetHeight);
        } else {
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
    }
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è
    animate();
    
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    window.addEventListener('resize', handleResize);
}

// –§—É–Ω–∫—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
function animate() {
    requestAnimationFrame(animate);
    
    if (particlesMesh) {
        particlesMesh.rotation.x += 0.0003;
        particlesMesh.rotation.y += 0.0005;
    }
    
    if (sphere) {
        sphere.rotation.y += 0.005;
        
        // –ü—É–ª—å—Å–∞—Ü—ñ—è —Å—Ñ–µ—Ä–∏
        const time = Date.now() * 0.001;
        sphere.scale.x = 1 + Math.sin(time) * 0.1;
        sphere.scale.y = 1 + Math.sin(time) * 0.1;
        sphere.scale.z = 1 + Math.sin(time) * 0.1;
    }
    
    if (renderer && scene && camera) {
        renderer.render(scene, camera);
    }
}

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
function handleResize() {
    const previewElement = document.querySelector('.experience-preview');
    
    if (camera && previewElement) {
        camera.aspect = previewElement.offsetWidth / previewElement.offsetHeight;
        camera.updateProjectionMatrix();
    }
    
    if (renderer && previewElement) {
        renderer.setSize(previewElement.offsetWidth, previewElement.offsetHeight);
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', function() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D-—Å—Ü–µ–Ω–∏
    init3DScene();
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ª—É–Ω–Ω—è"
    document.querySelectorAll('.create-echo-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const uploaderElement = document.getElementById('memory-uploader');
            if (uploaderElement) {
                uploaderElement.style.display = 'block';
                uploaderElement.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–æ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    const uploaderZone = document.getElementById('uploader-zone');
    const fileInput = document.getElementById('file-input');
    
    if (uploaderZone && fileInput) {
        // –ö–ª—ñ–∫ –ø–æ –∑–æ–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
        uploaderZone.addEventListener('click', () => {
            fileInput.click();
        });
        
        // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        uploaderZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploaderZone.style.background = 'rgba(71, 118, 230, 0.1)';
        });
        
        uploaderZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploaderZone.style.background = 'transparent';
        });
        
        uploaderZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploaderZone.style.background = 'transparent';
            
            if (e.dataTransfer.files.length) {
                fileInput.files = e.dataTransfer.files;
                handleFileSelect(e.dataTransfer.files[0]);
            }
        });
        
        // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥
        fileInput.addEventListener('change', () => {
            if (fileInput.files.length) {
                handleFileSelect(fileInput.files[0]);
            }
        });
    }
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–≤—ñ–π—Ç–∏"
    const loginBtn = document.querySelector('.login-btn');
    const loginModal = document.getElementById('login-modal');
    const closeModal = document.querySelector('.close-modal');
    
    if (loginBtn && loginModal) {
        loginBtn.addEventListener('click', (e) => {
            e.preventDefault();
            loginModal.style.display = 'flex';
        });
    }
    
    if (closeModal && loginModal) {
        closeModal.addEventListener('click', () => {
            loginModal.style.display = 'none';
        });
    }
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –∑–∞ –π–æ–≥–æ –º–µ–∂–∞–º–∏
    window.addEventListener('click', (e) => {
        if (e.target === loginModal) {
            loginModal.style.display = 'none';
        }
    });
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ª—É–Ω–Ω—è"
    const generateEchoBtn = document.getElementById('generate-echo-btn');
    if (generateEchoBtn) {
        generateEchoBtn.addEventListener('click', handleEchoGeneration);
    }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
function handleFileSelect(file) {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    // –£ –ø–æ–≤–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
    const uploaderText = document.querySelector('.uploader-text');
    if (uploaderText) {
        uploaderText.textContent = `–í–∏–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª: ${file.name}`;
    }
    
    // –ü–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
    if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(event) {
            const img = document.createElement('img');
            img.src = event.target.result;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '200px';
            img.style.borderRadius = '5px';
            img.style.marginBottom = '20px';
            
            // –ó–∞–º—ñ–Ω–∞ —ñ–∫–æ–Ω–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            const uploaderIcon = document.querySelector('.uploader-icon');
            if (uploaderIcon) {
                uploaderIcon.innerHTML = '';
                uploaderIcon.appendChild(img);
            }
        };
        reader.readAsDataURL(file);
    }
}

// –û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ª—É–Ω–Ω—è
function handleEchoGeneration() {
    const title = document.getElementById('memory-title');
    const description = document.getElementById('memory-description');
    const loader = document.getElementById('echo-loader');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    if (!title || !title.value || !description || !description.value) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏.');
        return;
    }
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (loader) {
        loader.style.display = 'block';
    }
    
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—É —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–≤ –±–∏ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞)
    setTimeout(() => {
        if (loader) {
            loader.style.display = 'none';
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        alert('–í–∞—à–µ –≤—ñ–¥–ª—É–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–≤ –±–∏ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∞—à–æ–≥–æ 3D-—Å–ø–æ–≥–∞–¥—É.');
        
        // –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        if (title) title.value = '';
        if (description) description.value = '';
        
        // –°–∫–∏–¥–∞–Ω–Ω—è –∑–æ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const uploaderIcon = document.querySelector('.uploader-icon');
        const uploaderText = document.querySelector('.uploader-text');
        
        if (uploaderIcon) {
            uploaderIcon.innerHTML = 'üì§';
        }
        
        if (uploaderText) {
            uploaderText.textContent = '–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Å—é–¥–∏ —Ñ–æ—Ç–æ –∞–±–æ –∫–ª–∞—Ü–Ω—ñ—Ç—å, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏';
        }
        
        // –ü—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const uploaderElement = document.getElementById('memory-uploader');
        if (uploaderElement) {
            uploaderElement.style.display = 'none';
        }
    }, 2000);
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    const speed = 200; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∞–Ω—ñ–º–∞—Ü—ñ—ó (–º–µ–Ω—à–µ = —à–≤–∏–¥—à–µ)

    counters.forEach(counter => {
        const target = +counter.innerText.replace(/,/g, '');
        let count = 0;
        const inc = target / speed;
        
        function updateCount() {
            if (count < target) {
                count += inc;
                counter.innerText = Math.ceil(count).toLocaleString();
                setTimeout(updateCount, 1);
            } else {
                counter.innerText = target.toLocaleString();
            }
        }
        
        updateCount();
    });
}

// –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –¥–æ –Ω–∏—Ö
window.addEventListener('scroll', function() {
    const countersElement = document.getElementById('counter-container');
    if (countersElement) {
        const position = countersElement.getBoundingClientRect();
        
        // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º–∏–π —É –≤—ñ–∫–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
        if (position.top >= 0 && position.bottom <= window.innerHeight) {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
            if (!countersElement.classList.contains('animated')) {
                countersElement.classList.add('animated');
                animateCounters();
            }
        }
    }
});